Terminals unused in grammar

    STRUCT
    TYPEDEF
    UNION
    _BOOL
    _COMPLEX
    _IMAGINARY
    HASH
    INVALID_TOKEN


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | INTEGER_CONSTANT
    3                   | FLOATING_CONSTANT
    4                   | CHARACTER_CONSTANT
    5                   | STRING_LITERAL
    6                   | LEFT_PARENTHESES expression RIGHT_PARENTHESES

    7 postfix_expression: primary_expression
    8                   | postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | postfix_expression DOT IDENTIFIER
   11                   | postfix_expression ARROW IDENTIFIER
   12                   | postfix_expression INCREMENT
   13                   | postfix_expression DECREMENT
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

   16 argument_expression_list_opt: argument_expression_list
   17                             | ε

   18 argument_expression_list: assignment_expression
   19                         | argument_expression_list COMMA assignment_expression

   20 unary_expression: postfix_expression
   21                 | INCREMENT unary_expression
   22                 | DECREMENT unary_expression
   23                 | unary_operator cast_expression
   24                 | SIZEOF unary_expression
   25                 | SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES

   26 unary_operator: BITWISE_AND
   27               | ASTERISK
   28               | PLUS
   29               | MINUS
   30               | TILDE
   31               | EXCLAMATION

   32 cast_expression: unary_expression
   33                | LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression

   34 multiplicative_expression: cast_expression
   35                          | multiplicative_expression ASTERISK cast_expression
   36                          | multiplicative_expression SLASH cast_expression
   37                          | multiplicative_expression MODULO cast_expression

   38 additive_expression: multiplicative_expression
   39                    | additive_expression PLUS multiplicative_expression
   40                    | additive_expression MINUS multiplicative_expression

   41 shift_expression: additive_expression
   42                 | shift_expression LEFT_SHIFT additive_expression
   43                 | shift_expression RIGHT_SHIFT additive_expression

   44 relational_expression: shift_expression
   45                      | relational_expression LESS_THAN shift_expression
   46                      | relational_expression GREATER_THAN shift_expression
   47                      | relational_expression LESS_EQUAL_THAN shift_expression
   48                      | relational_expression GREATER_EQUAL_THAN shift_expression

   49 equality_expression: relational_expression
   50                    | equality_expression EQUALS relational_expression
   51                    | equality_expression NOT_EQUALS relational_expression

   52 AND_expression: equality_expression
   53               | AND_expression BITWISE_AND equality_expression

   54 exclusive_OR_expression: AND_expression
   55                        | exclusive_OR_expression BITWISE_XOR AND_expression

   56 inclusive_OR_expression: exclusive_OR_expression
   57                        | inclusive_OR_expression BITWISE_OR exclusive_OR_expression

   58 M: ε

   59 N: ε

   60 logical_AND_expression: inclusive_OR_expression
   61                       | logical_AND_expression LOGICAL_AND M inclusive_OR_expression

   62 logical_OR_expression: logical_AND_expression
   63                      | logical_OR_expression LOGICAL_OR M logical_AND_expression

   64 conditional_expression: logical_OR_expression
   65                       | logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression

   66 assignment_expression: conditional_expression
   67                      | unary_expression assignment_operator assignment_expression

   68 assignment_operator: ASSIGNMENT
   69                    | ASTERISK_ASSIGNMENT
   70                    | SLASH_ASSIGNMENT
   71                    | MODULO_ASSIGNMENT
   72                    | PLUS_ASSIGNMENT
   73                    | MINUS_ASSIGNMENT
   74                    | LEFT_SHIFT_ASSIGNMENT
   75                    | RIGHT_SHIFT_ASSIGNMENT
   76                    | BITWISE_AND_ASSIGNMENT
   77                    | BITWISE_XOR_ASSIGNMENT
   78                    | BITWISE_OR_ASSIGNMENT

   79 expression: assignment_expression
   80           | expression COMMA assignment_expression

   81 constant_expression: conditional_expression

   82 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON

   83 init_declarator_list_opt: init_declarator_list
   84                         | ε

   85 declaration_specifiers: storage_class_specifier declaration_specifiers_opt
   86                       | type_specifier declaration_specifiers_opt
   87                       | type_qualifier declaration_specifiers_opt
   88                       | function_specifier declaration_specifiers_opt

   89 declaration_specifiers_opt: declaration_specifiers
   90                           | ε

   91 init_declarator_list: init_declarator
   92                     | init_declarator_list COMMA init_declarator

   93 init_declarator: declarator
   94                | declarator ASSIGNMENT initialiser

   95 storage_class_specifier: EXTERN
   96                        | STATIC
   97                        | AUTO
   98                        | REGISTER

   99 type_specifier: VOIDTYPE
  100               | CHARTYPE
  101               | SHORT
  102               | INTTYPE
  103               | LONG
  104               | FLOATTYPE
  105               | DOUBLE
  106               | SIGNED
  107               | UNSIGNED
  108               | enum_specifier

  109 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
  110                         | type_qualifier specifier_qualifier_list_opt

  111 specifier_qualifier_list_opt: specifier_qualifier_list
  112                             | ε

  113 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | ENUM IDENTIFIER

  116 identifier_opt: IDENTIFIER
  117               | ε

  118 enumerator_list: enumerator
  119                | enumerator_list COMMA enumerator

  120 enumerator: IDENTIFIER
  121           | IDENTIFIER ASSIGNMENT constant_expression

  122 type_qualifier: CONST
  123               | RESTRICT
  124               | VOLATILE

  125 function_specifier: INLINE

  126 declarator: pointer direct_declarator
  127           | direct_declarator

  128 change_scope: ε

  129 direct_declarator: IDENTIFIER
  130                  | LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  131                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  134                  | direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  135                  | direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  140                  | direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  142                  | direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

  143 type_qualifier_list_opt: type_qualifier_list
  144                        | ε

  145 pointer: ASTERISK type_qualifier_list_opt
  146        | ASTERISK type_qualifier_list_opt pointer

  147 type_qualifier_list: type_qualifier
  148                    | type_qualifier_list type_qualifier

  149 parameter_type_list: parameter_list
  150                    | parameter_list COMMA ELLIPSIS

  151 parameter_list: parameter_declaration
  152               | parameter_list COMMA parameter_declaration

  153 parameter_declaration: declaration_specifiers declarator
  154                      | declaration_specifiers

  155 identifier_list: IDENTIFIER
  156                | identifier_list COMMA IDENTIFIER

  157 type_name: specifier_qualifier_list

  158 initialiser: assignment_expression
  159            | LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  160            | LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

  161 initialiser_list: designation_opt initialiser
  162                 | initialiser_list COMMA designation_opt initialiser

  163 designation_opt: designation
  164                | ε

  165 designation: designator_list ASSIGNMENT

  166 designator_list: designator
  167                | designator_list designator

  168 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  169           | DOT IDENTIFIER

  170 statement: labeled_statement
  171          | compound_statement
  172          | expression_statement
  173          | selection_statement
  174          | iteration_statement
  175          | jump_statement

  176 labeled_statement: IDENTIFIER COLON statement
  177                  | CASE constant_expression COLON statement
  178                  | DEFAULT COLON statement

  179 compound_statement: LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

  180 block_item_list_opt: block_item_list
  181                    | ε

  182 block_item_list: block_item
  183                | block_item_list M block_item

  184 block_item: declaration
  185           | statement

  186 expression_statement: expression_opt SEMI_COLON

  187 expression_opt: expression
  188               | ε

  189 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement

  192 iteration_statement: WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

  196 jump_statement: GOTO IDENTIFIER SEMI_COLON
  197               | CONTINUE SEMI_COLON
  198               | BREAK SEMI_COLON
  199               | RETURN expression_opt SEMI_COLON

  200 translation_unit: external_declaration
  201                 | translation_unit external_declaration

  202 external_declaration: function_definition
  203                     | declaration

  204 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

  205 declaration_list_opt: declaration_list
  206                     | ε

  207 declaration_list: declaration
  208                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    AUTO (258) 97
    BREAK (259) 198
    CASE (260) 177
    CHARTYPE (261) 100
    CONST (262) 122
    CONTINUE (263) 197
    DEFAULT (264) 178
    DO (265) 193
    DOUBLE (266) 105
    ELSE (267) 190
    ENUM (268) 113 114 115
    EXTERN (269) 95
    FLOATTYPE (270) 104
    FOR (271) 194 195
    GOTO (272) 196
    IF (273) 189 190
    INLINE (274) 125
    INTTYPE (275) 102
    LONG (276) 103
    REGISTER (277) 98
    RESTRICT (278) 123
    RETURN (279) 199
    SHORT (280) 101
    SIGNED (281) 106
    SIZEOF (282) 24 25
    STATIC (283) 96 135 136 137
    STRUCT (284)
    SWITCH (285) 191
    TYPEDEF (286)
    UNION (287)
    UNSIGNED (288) 107
    VOIDTYPE (289) 99
    VOLATILE (290) 124
    WHILE (291) 192 193
    _BOOL (292)
    _COMPLEX (293)
    _IMAGINARY (294)
    IDENTIFIER <symbol> (295) 1 10 11 115 116 120 121 129 155 156 169 176 196
    INTEGER_CONSTANT <intVal> (296) 2
    FLOATING_CONSTANT <floatVal> (297) 3
    CHARACTER_CONSTANT <charVal> (298) 4
    STRING_LITERAL <stringVal> (299) 5
    LEFT_SQUARE_BRACKET (300) 8 131 132 133 134 135 136 137 138 139 168
    INCREMENT (301) 12 21
    SLASH (302) 36
    QUESTION_MARK (303) 65
    ASSIGNMENT (304) 68 94 121 165
    COMMA (305) 15 19 80 92 114 119 150 152 156 160 162
    RIGHT_SQUARE_BRACKET (306) 8 131 132 133 134 135 136 137 138 139 168
    LEFT_PARENTHESES (307) 6 9 14 15 25 33 130 140 141 142 189 190 191 192 193 194 195
    LEFT_CURLY_BRACKET (308) 14 15 113 114 159 160 179 204
    RIGHT_CURLY_BRACKET (309) 14 15 113 114 159 160 179 204
    DOT (310) 10 169
    ARROW (311) 11
    ASTERISK (312) 27 35 138 139 145 146
    PLUS (313) 28 39
    MINUS (314) 29 40
    TILDE (315) 30
    EXCLAMATION (316) 31
    MODULO (317) 37
    LEFT_SHIFT (318) 42
    RIGHT_SHIFT (319) 43
    LESS_THAN (320) 45
    GREATER_THAN (321) 46
    LESS_EQUAL_THAN (322) 47
    GREATER_EQUAL_THAN (323) 48
    COLON (324) 65 176 177 178
    SEMI_COLON (325) 82 186 193 194 195 196 197 198 199
    ELLIPSIS (326) 150
    ASTERISK_ASSIGNMENT (327) 69
    SLASH_ASSIGNMENT (328) 70
    MODULO_ASSIGNMENT (329) 71
    PLUS_ASSIGNMENT (330) 72
    MINUS_ASSIGNMENT (331) 73
    LEFT_SHIFT_ASSIGNMENT (332) 74
    HASH (333)
    DECREMENT (334) 13 22
    RIGHT_PARENTHESES (335) 6 9 14 15 25 33 130 140 141 142 189 190 191 192 193 194 195
    BITWISE_AND (336) 26 53
    EQUALS (337) 50
    BITWISE_XOR (338) 55
    BITWISE_OR (339) 57
    LOGICAL_AND (340) 61
    LOGICAL_OR (341) 63
    RIGHT_SHIFT_ASSIGNMENT (342) 75
    NOT_EQUALS (343) 51
    BITWISE_AND_ASSIGNMENT (344) 76
    BITWISE_OR_ASSIGNMENT (345) 78
    BITWISE_XOR_ASSIGNMENT (346) 77
    INVALID_TOKEN (347)
    THEN (348)


Nonterminals, with rules where they appear

    $accept (94)
        on left: 0
    primary_expression <expression> (95)
        on left: 1 2 3 4 5 6
        on right: 7
    postfix_expression <array> (96)
        on left: 7 8 9 10 11 12 13 14 15
        on right: 8 9 10 11 12 13 20
    argument_expression_list_opt <parameterCount> (97)
        on left: 16 17
        on right: 9
    argument_expression_list <parameterCount> (98)
        on left: 18 19
        on right: 16 19
    unary_expression <array> (99)
        on left: 20 21 22 23 24 25
        on right: 21 22 24 32 67
    unary_operator <unaryOperator> (100)
        on left: 26 27 28 29 30 31
        on right: 23
    cast_expression <array> (101)
        on left: 32 33
        on right: 23 33 34 35 36 37
    multiplicative_expression <expression> (102)
        on left: 34 35 36 37
        on right: 35 36 37 38 39 40
    additive_expression <expression> (103)
        on left: 38 39 40
        on right: 39 40 41 42 43
    shift_expression <expression> (104)
        on left: 41 42 43
        on right: 42 43 44 45 46 47 48
    relational_expression <expression> (105)
        on left: 44 45 46 47 48
        on right: 45 46 47 48 49 50 51
    equality_expression <expression> (106)
        on left: 49 50 51
        on right: 50 51 52 53
    AND_expression <expression> (107)
        on left: 52 53
        on right: 53 54 55
    exclusive_OR_expression <expression> (108)
        on left: 54 55
        on right: 55 56 57
    inclusive_OR_expression <expression> (109)
        on left: 56 57
        on right: 57 60 61
    M <instructionNumber> (110)
        on left: 58
        on right: 61 63 65 183 189 190 192 193 194
    N <statement> (111)
        on left: 59
        on right: 65 189 190 194
    logical_AND_expression <expression> (112)
        on left: 60 61
        on right: 61 62 63
    logical_OR_expression <expression> (113)
        on left: 62 63
        on right: 63 64 65
    conditional_expression <expression> (114)
        on left: 64 65
        on right: 65 66 81
    assignment_expression <expression> (115)
        on left: 66 67
        on right: 18 19 67 79 80 131 133 135 136 137 158
    assignment_operator (116)
        on left: 68 69 70 71 72 73 74 75 76 77 78
        on right: 67
    expression <expression> (117)
        on left: 79 80
        on right: 6 8 65 80 187 189 190 191 192 193
    constant_expression (118)
        on left: 81
        on right: 121 168 177
    declaration (119)
        on left: 82
        on right: 184 195 203 207 208
    init_declarator_list_opt (120)
        on left: 83 84
        on right: 82
    declaration_specifiers (121)
        on left: 85 86 87 88
        on right: 82 89 153 154 204
    declaration_specifiers_opt (122)
        on left: 89 90
        on right: 85 86 87 88
    init_declarator_list (123)
        on left: 91 92
        on right: 83 92
    init_declarator <symbol> (124)
        on left: 93 94
        on right: 91 92
    storage_class_specifier (125)
        on left: 95 96 97 98
        on right: 85
    type_specifier (126)
        on left: 99 100 101 102 103 104 105 106 107 108
        on right: 86 109
    specifier_qualifier_list (127)
        on left: 109 110
        on right: 111 157
    specifier_qualifier_list_opt (128)
        on left: 111 112
        on right: 109 110
    enum_specifier (129)
        on left: 113 114 115
        on right: 108
    identifier_opt (130)
        on left: 116 117
        on right: 113 114
    enumerator_list (131)
        on left: 118 119
        on right: 113 114 119
    enumerator (132)
        on left: 120 121
        on right: 118 119
    type_qualifier (133)
        on left: 122 123 124
        on right: 87 110 147 148
    function_specifier (134)
        on left: 125
        on right: 88
    declarator <symbol> (135)
        on left: 126 127
        on right: 93 94 130 153 204
    change_scope (136)
        on left: 128
        on right: 140 142 204
    direct_declarator <symbol> (137)
        on left: 129 130 131 132 133 134 135 136 137 138 139 140 141 142
        on right: 126 127 131 132 133 134 135 136 137 138 139 140 141 142
    type_qualifier_list_opt (138)
        on left: 143 144
        on right: 145 146
    pointer <symbolType> (139)
        on left: 145 146
        on right: 126 146
    type_qualifier_list (140)
        on left: 147 148
        on right: 131 132 135 137 138 143 148
    parameter_type_list (141)
        on left: 149 150
        on right: 140
    parameter_list (142)
        on left: 151 152
        on right: 149 150 152
    parameter_declaration (143)
        on left: 153 154
        on right: 151 152
    identifier_list (144)
        on left: 155 156
        on right: 141 156
    type_name (145)
        on left: 157
        on right: 14 15 25 33
    initialiser <symbol> (146)
        on left: 158 159 160
        on right: 94 161 162
    initialiser_list (147)
        on left: 161 162
        on right: 14 15 159 160 162
    designation_opt (148)
        on left: 163 164
        on right: 161 162
    designation (149)
        on left: 165
        on right: 163
    designator_list (150)
        on left: 166 167
        on right: 165 167
    designator (151)
        on left: 168 169
        on right: 166 167
    statement <statement> (152)
        on left: 170 171 172 173 174 175
        on right: 176 177 178 185 189 190 191 192 193 194 195
    labeled_statement <statement> (153)
        on left: 176 177 178
        on right: 170
    compound_statement <statement> (154)
        on left: 179
        on right: 171
    block_item_list_opt <statement> (155)
        on left: 180 181
        on right: 179 204
    block_item_list <statement> (156)
        on left: 182 183
        on right: 180 183
    block_item <statement> (157)
        on left: 184 185
        on right: 182 183
    expression_statement <expression> (158)
        on left: 186
        on right: 172
    expression_opt <expression> (159)
        on left: 187 188
        on right: 186 194 195 199
    selection_statement <statement> (160)
        on left: 189 190 191
        on right: 173
    iteration_statement <statement> (161)
        on left: 192 193 194 195
        on right: 174
    jump_statement <statement> (162)
        on left: 196 197 198 199
        on right: 175
    translation_unit (163)
        on left: 200 201
        on right: 0 201
    external_declaration (164)
        on left: 202 203
        on right: 200 201
    function_definition (165)
        on left: 204
        on right: 202
    declaration_list_opt (166)
        on left: 205 206
        on right: 204
    declaration_list (167)
        on left: 207 208
        on right: 205 208


State 0

    0 $accept: • translation_unit $end
   82 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  200 translation_unit: • external_declaration
  201                 | • translation_unit external_declaration
  202 external_declaration: • function_definition
  203                     | • declaration
  204 function_definition: • declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOATTYPE  shift, and go to state 7
    INLINE     shift, and go to state 8
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18

    declaration              go to state 19
    declaration_specifiers   go to state 20
    storage_class_specifier  go to state 21
    type_specifier           go to state 22
    enum_specifier           go to state 23
    type_qualifier           go to state 24
    function_specifier       go to state 25
    translation_unit         go to state 26
    external_declaration     go to state 27
    function_definition      go to state 28


State 1

   97 storage_class_specifier: AUTO •

    $default  reduce using rule 97 (storage_class_specifier)


State 2

  100 type_specifier: CHARTYPE •

    $default  reduce using rule 100 (type_specifier)


State 3

  122 type_qualifier: CONST •

    $default  reduce using rule 122 (type_qualifier)


State 4

  105 type_specifier: DOUBLE •

    $default  reduce using rule 105 (type_specifier)


State 5

  113 enum_specifier: ENUM • identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | ENUM • identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | ENUM • IDENTIFIER
  116 identifier_opt: • IDENTIFIER
  117               | ε •  [LEFT_CURLY_BRACKET]

    IDENTIFIER  shift, and go to state 29

    $default  reduce using rule 117 (identifier_opt)

    identifier_opt  go to state 30


State 6

   95 storage_class_specifier: EXTERN •

    $default  reduce using rule 95 (storage_class_specifier)


State 7

  104 type_specifier: FLOATTYPE •

    $default  reduce using rule 104 (type_specifier)


State 8

  125 function_specifier: INLINE •

    $default  reduce using rule 125 (function_specifier)


State 9

  102 type_specifier: INTTYPE •

    $default  reduce using rule 102 (type_specifier)


State 10

  103 type_specifier: LONG •

    $default  reduce using rule 103 (type_specifier)


State 11

   98 storage_class_specifier: REGISTER •

    $default  reduce using rule 98 (storage_class_specifier)


State 12

  123 type_qualifier: RESTRICT •

    $default  reduce using rule 123 (type_qualifier)


State 13

  101 type_specifier: SHORT •

    $default  reduce using rule 101 (type_specifier)


State 14

  106 type_specifier: SIGNED •

    $default  reduce using rule 106 (type_specifier)


State 15

   96 storage_class_specifier: STATIC •

    $default  reduce using rule 96 (storage_class_specifier)


State 16

  107 type_specifier: UNSIGNED •

    $default  reduce using rule 107 (type_specifier)


State 17

   99 type_specifier: VOIDTYPE •

    $default  reduce using rule 99 (type_specifier)


State 18

  124 type_qualifier: VOLATILE •

    $default  reduce using rule 124 (type_qualifier)


State 19

  203 external_declaration: declaration •

    $default  reduce using rule 203 (external_declaration)


State 20

   82 declaration: declaration_specifiers • init_declarator_list_opt SEMI_COLON
   83 init_declarator_list_opt: • init_declarator_list
   84                         | ε •  [SEMI_COLON]
   91 init_declarator_list: • init_declarator
   92                     | • init_declarator_list COMMA init_declarator
   93 init_declarator: • declarator
   94                | • declarator ASSIGNMENT initialiser
  126 declarator: • pointer direct_declarator
  127           | • direct_declarator
  129 direct_declarator: • IDENTIFIER
  130                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  131                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  145 pointer: • ASTERISK type_qualifier_list_opt
  146        | • ASTERISK type_qualifier_list_opt pointer
  204 function_definition: declaration_specifiers • declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    IDENTIFIER        shift, and go to state 31
    LEFT_PARENTHESES  shift, and go to state 32
    ASTERISK          shift, and go to state 33

    $default  reduce using rule 84 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 34
    init_declarator_list      go to state 35
    init_declarator           go to state 36
    declarator                go to state 37
    direct_declarator         go to state 38
    pointer                   go to state 39


State 21

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | storage_class_specifier • declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   89 declaration_specifiers_opt: • declaration_specifiers
   90                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOATTYPE  shift, and go to state 7
    INLINE     shift, and go to state 8
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 40
    declaration_specifiers_opt  go to state 41
    storage_class_specifier     go to state 21
    type_specifier              go to state 22
    enum_specifier              go to state 23
    type_qualifier              go to state 24
    function_specifier          go to state 25


State 22

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   86                       | type_specifier • declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   89 declaration_specifiers_opt: • declaration_specifiers
   90                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOATTYPE  shift, and go to state 7
    INLINE     shift, and go to state 8
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 40
    declaration_specifiers_opt  go to state 42
    storage_class_specifier     go to state 21
    type_specifier              go to state 22
    enum_specifier              go to state 23
    type_qualifier              go to state 24
    function_specifier          go to state 25


State 23

  108 type_specifier: enum_specifier •

    $default  reduce using rule 108 (type_specifier)


State 24

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   87                       | type_qualifier • declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   89 declaration_specifiers_opt: • declaration_specifiers
   90                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOATTYPE  shift, and go to state 7
    INLINE     shift, and go to state 8
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 40
    declaration_specifiers_opt  go to state 43
    storage_class_specifier     go to state 21
    type_specifier              go to state 22
    enum_specifier              go to state 23
    type_qualifier              go to state 24
    function_specifier          go to state 25


State 25

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   88                       | function_specifier • declaration_specifiers_opt
   89 declaration_specifiers_opt: • declaration_specifiers
   90                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOATTYPE  shift, and go to state 7
    INLINE     shift, and go to state 8
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 40
    declaration_specifiers_opt  go to state 44
    storage_class_specifier     go to state 21
    type_specifier              go to state 22
    enum_specifier              go to state 23
    type_qualifier              go to state 24
    function_specifier          go to state 25


State 26

    0 $accept: translation_unit • $end
   82 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  201 translation_unit: translation_unit • external_declaration
  202 external_declaration: • function_definition
  203                     | • declaration
  204 function_definition: • declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $end       shift, and go to state 45
    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOATTYPE  shift, and go to state 7
    INLINE     shift, and go to state 8
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18

    declaration              go to state 19
    declaration_specifiers   go to state 20
    storage_class_specifier  go to state 21
    type_specifier           go to state 22
    enum_specifier           go to state 23
    type_qualifier           go to state 24
    function_specifier       go to state 25
    external_declaration     go to state 46
    function_definition      go to state 28


State 27

  200 translation_unit: external_declaration •

    $default  reduce using rule 200 (translation_unit)


State 28

  202 external_declaration: function_definition •

    $default  reduce using rule 202 (external_declaration)


State 29

  115 enum_specifier: ENUM IDENTIFIER •  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, FLOATTYPE, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
  116 identifier_opt: IDENTIFIER •  [LEFT_CURLY_BRACKET]

    LEFT_CURLY_BRACKET  reduce using rule 116 (identifier_opt)
    $default            reduce using rule 115 (enum_specifier)


State 30

  113 enum_specifier: ENUM identifier_opt • LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | ENUM identifier_opt • LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 47


State 31

  129 direct_declarator: IDENTIFIER •

    $default  reduce using rule 129 (direct_declarator)


State 32

  126 declarator: • pointer direct_declarator
  127           | • direct_declarator
  129 direct_declarator: • IDENTIFIER
  130                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  130                  | LEFT_PARENTHESES • declarator RIGHT_PARENTHESES
  131                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  145 pointer: • ASTERISK type_qualifier_list_opt
  146        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 31
    LEFT_PARENTHESES  shift, and go to state 32
    ASTERISK          shift, and go to state 33

    declarator         go to state 48
    direct_declarator  go to state 38
    pointer            go to state 39


State 33

  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  143 type_qualifier_list_opt: • type_qualifier_list
  144                        | ε •  [IDENTIFIER, LEFT_PARENTHESES, ASTERISK]
  145 pointer: ASTERISK • type_qualifier_list_opt
  146        | ASTERISK • type_qualifier_list_opt pointer
  147 type_qualifier_list: • type_qualifier
  148                    | • type_qualifier_list type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 144 (type_qualifier_list_opt)

    type_qualifier           go to state 49
    type_qualifier_list_opt  go to state 50
    type_qualifier_list      go to state 51


State 34

   82 declaration: declaration_specifiers init_declarator_list_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 52


State 35

   83 init_declarator_list_opt: init_declarator_list •  [SEMI_COLON]
   92 init_declarator_list: init_declarator_list • COMMA init_declarator

    COMMA  shift, and go to state 53

    $default  reduce using rule 83 (init_declarator_list_opt)


State 36

   91 init_declarator_list: init_declarator •

    $default  reduce using rule 91 (init_declarator_list)


State 37

   82 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   93 init_declarator: declarator •  [COMMA, SEMI_COLON]
   94                | declarator • ASSIGNMENT initialiser
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  204 function_definition: declaration_specifiers declarator • declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  205 declaration_list_opt: • declaration_list
  206                     | ε •  [LEFT_CURLY_BRACKET]
  207 declaration_list: • declaration
  208                 | • declaration_list declaration

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    ASSIGNMENT  shift, and go to state 54

    LEFT_CURLY_BRACKET  reduce using rule 206 (declaration_list_opt)
    $default            reduce using rule 93 (init_declarator)

    declaration              go to state 55
    declaration_specifiers   go to state 56
    storage_class_specifier  go to state 21
    type_specifier           go to state 22
    enum_specifier           go to state 23
    type_qualifier           go to state 24
    function_specifier       go to state 25
    declaration_list_opt     go to state 57
    declaration_list         go to state 58


State 38

  127 declarator: direct_declarator •  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, FLOATTYPE, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
  131 direct_declarator: direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | direct_declarator • LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  134                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  135                  | direct_declarator • LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | direct_declarator • LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | direct_declarator • LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  140                  | direct_declarator • LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | direct_declarator • LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  142                  | direct_declarator • LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 59
    LEFT_PARENTHESES     shift, and go to state 60

    $default  reduce using rule 127 (declarator)


State 39

  126 declarator: pointer • direct_declarator
  129 direct_declarator: • IDENTIFIER
  130                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  131                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    IDENTIFIER        shift, and go to state 31
    LEFT_PARENTHESES  shift, and go to state 32

    direct_declarator  go to state 61


State 40

   89 declaration_specifiers_opt: declaration_specifiers •

    $default  reduce using rule 89 (declaration_specifiers_opt)


State 41

   85 declaration_specifiers: storage_class_specifier declaration_specifiers_opt •

    $default  reduce using rule 85 (declaration_specifiers)


State 42

   86 declaration_specifiers: type_specifier declaration_specifiers_opt •

    $default  reduce using rule 86 (declaration_specifiers)


State 43

   87 declaration_specifiers: type_qualifier declaration_specifiers_opt •

    $default  reduce using rule 87 (declaration_specifiers)


State 44

   88 declaration_specifiers: function_specifier declaration_specifiers_opt •

    $default  reduce using rule 88 (declaration_specifiers)


State 45

    0 $accept: translation_unit $end •

    $default  accept


State 46

  201 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 201 (translation_unit)


State 47

  113 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET • enumerator_list RIGHT_CURLY_BRACKET
  114               | ENUM identifier_opt LEFT_CURLY_BRACKET • enumerator_list COMMA RIGHT_CURLY_BRACKET
  118 enumerator_list: • enumerator
  119                | • enumerator_list COMMA enumerator
  120 enumerator: • IDENTIFIER
  121           | • IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER  shift, and go to state 62

    enumerator_list  go to state 63
    enumerator       go to state 64


State 48

  130 direct_declarator: LEFT_PARENTHESES declarator • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 65


State 49

  147 type_qualifier_list: type_qualifier •

    $default  reduce using rule 147 (type_qualifier_list)


State 50

  145 pointer: • ASTERISK type_qualifier_list_opt
  145        | ASTERISK type_qualifier_list_opt •  [IDENTIFIER, LEFT_PARENTHESES]
  146        | • ASTERISK type_qualifier_list_opt pointer
  146        | ASTERISK type_qualifier_list_opt • pointer

    ASTERISK  shift, and go to state 33

    $default  reduce using rule 145 (pointer)

    pointer  go to state 66


State 51

  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  143 type_qualifier_list_opt: type_qualifier_list •  [IDENTIFIER, LEFT_PARENTHESES, ASTERISK]
  148 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 143 (type_qualifier_list_opt)

    type_qualifier  go to state 67


State 52

   82 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON •

    $default  reduce using rule 82 (declaration)


State 53

   92 init_declarator_list: init_declarator_list COMMA • init_declarator
   93 init_declarator: • declarator
   94                | • declarator ASSIGNMENT initialiser
  126 declarator: • pointer direct_declarator
  127           | • direct_declarator
  129 direct_declarator: • IDENTIFIER
  130                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  131                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  145 pointer: • ASTERISK type_qualifier_list_opt
  146        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 31
    LEFT_PARENTHESES  shift, and go to state 32
    ASTERISK          shift, and go to state 33

    init_declarator    go to state 68
    declarator         go to state 69
    direct_declarator  go to state 38
    pointer            go to state 39


State 54

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   94 init_declarator: declarator ASSIGNMENT • initialiser
  158 initialiser: • assignment_expression
  159            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  160            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 78
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 102
    initialiser                go to state 103


State 55

  207 declaration_list: declaration •

    $default  reduce using rule 207 (declaration_list)


State 56

   82 declaration: declaration_specifiers • init_declarator_list_opt SEMI_COLON
   83 init_declarator_list_opt: • init_declarator_list
   84                         | ε •  [SEMI_COLON]
   91 init_declarator_list: • init_declarator
   92                     | • init_declarator_list COMMA init_declarator
   93 init_declarator: • declarator
   94                | • declarator ASSIGNMENT initialiser
  126 declarator: • pointer direct_declarator
  127           | • direct_declarator
  129 direct_declarator: • IDENTIFIER
  130                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  131                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  145 pointer: • ASTERISK type_qualifier_list_opt
  146        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 31
    LEFT_PARENTHESES  shift, and go to state 32
    ASTERISK          shift, and go to state 33

    $default  reduce using rule 84 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 34
    init_declarator_list      go to state 35
    init_declarator           go to state 36
    declarator                go to state 69
    direct_declarator         go to state 38
    pointer                   go to state 39


State 57

  128 change_scope: ε •
  204 function_definition: declaration_specifiers declarator declaration_list_opt • change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 128 (change_scope)

    change_scope  go to state 104


State 58

   82 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  205 declaration_list_opt: declaration_list •  [LEFT_CURLY_BRACKET]
  208 declaration_list: declaration_list • declaration

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOATTYPE  shift, and go to state 7
    INLINE     shift, and go to state 8
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18

    $default  reduce using rule 205 (declaration_list_opt)

    declaration              go to state 105
    declaration_specifiers   go to state 56
    storage_class_specifier  go to state 21
    type_specifier           go to state 22
    enum_specifier           go to state 23
    type_qualifier           go to state 24
    function_specifier       go to state 25


State 59

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  131 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | direct_declarator LEFT_SQUARE_BRACKET • assignment_expression RIGHT_SQUARE_BRACKET
  134                  | direct_declarator LEFT_SQUARE_BRACKET • RIGHT_SQUARE_BRACKET
  135                  | direct_declarator LEFT_SQUARE_BRACKET • STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | direct_declarator LEFT_SQUARE_BRACKET • STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | direct_declarator LEFT_SQUARE_BRACKET • ASTERISK RIGHT_SQUARE_BRACKET
  147 type_qualifier_list: • type_qualifier
  148                    | • type_qualifier_list type_qualifier

    CONST                 shift, and go to state 3
    RESTRICT              shift, and go to state 12
    SIZEOF                shift, and go to state 70
    STATIC                shift, and go to state 106
    VOLATILE              shift, and go to state 18
    IDENTIFIER            shift, and go to state 71
    INTEGER_CONSTANT      shift, and go to state 72
    FLOATING_CONSTANT     shift, and go to state 73
    CHARACTER_CONSTANT    shift, and go to state 74
    STRING_LITERAL        shift, and go to state 75
    INCREMENT             shift, and go to state 76
    RIGHT_SQUARE_BRACKET  shift, and go to state 107
    LEFT_PARENTHESES      shift, and go to state 77
    ASTERISK              shift, and go to state 108
    PLUS                  shift, and go to state 80
    MINUS                 shift, and go to state 81
    TILDE                 shift, and go to state 82
    EXCLAMATION           shift, and go to state 83
    DECREMENT             shift, and go to state 84
    BITWISE_AND           shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 109
    type_qualifier             go to state 49
    type_qualifier_list        go to state 110


State 60

  128 change_scope: ε •  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, FLOATTYPE, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, RIGHT_PARENTHESES]
  140 direct_declarator: direct_declarator LEFT_PARENTHESES • change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | direct_declarator LEFT_PARENTHESES • identifier_list RIGHT_PARENTHESES
  142                  | direct_declarator LEFT_PARENTHESES • change_scope RIGHT_PARENTHESES
  155 identifier_list: • IDENTIFIER
  156                | • identifier_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 111

    $default  reduce using rule 128 (change_scope)

    change_scope     go to state 112
    identifier_list  go to state 113


State 61

  126 declarator: pointer direct_declarator •  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, FLOATTYPE, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
  131 direct_declarator: direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | direct_declarator • LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  134                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  135                  | direct_declarator • LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | direct_declarator • LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | direct_declarator • LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  140                  | direct_declarator • LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | direct_declarator • LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  142                  | direct_declarator • LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 59
    LEFT_PARENTHESES     shift, and go to state 60

    $default  reduce using rule 126 (declarator)


State 62

  120 enumerator: IDENTIFIER •  [COMMA, RIGHT_CURLY_BRACKET]
  121           | IDENTIFIER • ASSIGNMENT constant_expression

    ASSIGNMENT  shift, and go to state 114

    $default  reduce using rule 120 (enumerator)


State 63

  113 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list • RIGHT_CURLY_BRACKET
  114               | ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list • COMMA RIGHT_CURLY_BRACKET
  119 enumerator_list: enumerator_list • COMMA enumerator

    COMMA                shift, and go to state 115
    RIGHT_CURLY_BRACKET  shift, and go to state 116


State 64

  118 enumerator_list: enumerator •

    $default  reduce using rule 118 (enumerator_list)


State 65

  130 direct_declarator: LEFT_PARENTHESES declarator RIGHT_PARENTHESES •

    $default  reduce using rule 130 (direct_declarator)


State 66

  146 pointer: ASTERISK type_qualifier_list_opt pointer •

    $default  reduce using rule 146 (pointer)


State 67

  148 type_qualifier_list: type_qualifier_list type_qualifier •

    $default  reduce using rule 148 (type_qualifier_list)


State 68

   92 init_declarator_list: init_declarator_list COMMA init_declarator •

    $default  reduce using rule 92 (init_declarator_list)


State 69

   93 init_declarator: declarator •  [COMMA, SEMI_COLON]
   94                | declarator • ASSIGNMENT initialiser

    ASSIGNMENT  shift, and go to state 54

    $default  reduce using rule 93 (init_declarator)


State 70

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   24                 | SIZEOF • unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25                 | SIZEOF • LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 117
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression  go to state 86
    postfix_expression  go to state 87
    unary_expression    go to state 118
    unary_operator      go to state 89


State 71

    1 primary_expression: IDENTIFIER •

    $default  reduce using rule 1 (primary_expression)


State 72

    2 primary_expression: INTEGER_CONSTANT •

    $default  reduce using rule 2 (primary_expression)


State 73

    3 primary_expression: FLOATING_CONSTANT •

    $default  reduce using rule 3 (primary_expression)


State 74

    4 primary_expression: CHARACTER_CONSTANT •

    $default  reduce using rule 4 (primary_expression)


State 75

    5 primary_expression: STRING_LITERAL •

    $default  reduce using rule 5 (primary_expression)


State 76

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   21                 | INCREMENT • unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 119
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression  go to state 86
    postfix_expression  go to state 87
    unary_expression    go to state 120
    unary_operator      go to state 89


State 77

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6                   | LEFT_PARENTHESES • expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33                | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  109 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  110                         | • type_qualifier specifier_qualifier_list_opt
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  157 type_name: • specifier_qualifier_list

    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOATTYPE           shift, and go to state 7
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 70
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 122
    type_specifier             go to state 123
    specifier_qualifier_list   go to state 124
    enum_specifier             go to state 23
    type_qualifier             go to state 125
    type_name                  go to state 126


State 78

  159 initialiser: LEFT_CURLY_BRACKET • initialiser_list RIGHT_CURLY_BRACKET
  160            | LEFT_CURLY_BRACKET • initialiser_list COMMA RIGHT_CURLY_BRACKET
  161 initialiser_list: • designation_opt initialiser
  162                 | • initialiser_list COMMA designation_opt initialiser
  163 designation_opt: • designation
  164                | ε •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  165 designation: • designator_list ASSIGNMENT
  166 designator_list: • designator
  167                | • designator_list designator
  168 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  169           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 127
    DOT                  shift, and go to state 128

    $default  reduce using rule 164 (designation_opt)

    initialiser_list  go to state 129
    designation_opt   go to state 130
    designation       go to state 131
    designator_list   go to state 132
    designator        go to state 133


State 79

   27 unary_operator: ASTERISK •

    $default  reduce using rule 27 (unary_operator)


State 80

   28 unary_operator: PLUS •

    $default  reduce using rule 28 (unary_operator)


State 81

   29 unary_operator: MINUS •

    $default  reduce using rule 29 (unary_operator)


State 82

   30 unary_operator: TILDE •

    $default  reduce using rule 30 (unary_operator)


State 83

   31 unary_operator: EXCLAMATION •

    $default  reduce using rule 31 (unary_operator)


State 84

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   22                 | DECREMENT • unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 119
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression  go to state 86
    postfix_expression  go to state 87
    unary_expression    go to state 134
    unary_operator      go to state 89


State 85

   26 unary_operator: BITWISE_AND •

    $default  reduce using rule 26 (unary_operator)


State 86

    7 postfix_expression: primary_expression •

    $default  reduce using rule 7 (postfix_expression)


State 87

    8 postfix_expression: postfix_expression • LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | postfix_expression • LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | postfix_expression • DOT IDENTIFIER
   11                   | postfix_expression • ARROW IDENTIFIER
   12                   | postfix_expression • INCREMENT
   13                   | postfix_expression • DECREMENT
   20 unary_expression: postfix_expression •  [SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, ASTERISK_ASSIGNMENT, SLASH_ASSIGNMENT, MODULO_ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, RIGHT_SHIFT_ASSIGNMENT, NOT_EQUALS, BITWISE_AND_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT]

    LEFT_SQUARE_BRACKET  shift, and go to state 135
    INCREMENT            shift, and go to state 136
    LEFT_PARENTHESES     shift, and go to state 137
    DOT                  shift, and go to state 138
    ARROW                shift, and go to state 139
    DECREMENT            shift, and go to state 140

    $default  reduce using rule 20 (unary_expression)


State 88

   32 cast_expression: unary_expression •  [SLASH, QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]
   67 assignment_expression: unary_expression • assignment_operator assignment_expression
   68 assignment_operator: • ASSIGNMENT
   69                    | • ASTERISK_ASSIGNMENT
   70                    | • SLASH_ASSIGNMENT
   71                    | • MODULO_ASSIGNMENT
   72                    | • PLUS_ASSIGNMENT
   73                    | • MINUS_ASSIGNMENT
   74                    | • LEFT_SHIFT_ASSIGNMENT
   75                    | • RIGHT_SHIFT_ASSIGNMENT
   76                    | • BITWISE_AND_ASSIGNMENT
   77                    | • BITWISE_XOR_ASSIGNMENT
   78                    | • BITWISE_OR_ASSIGNMENT

    ASSIGNMENT              shift, and go to state 141
    ASTERISK_ASSIGNMENT     shift, and go to state 142
    SLASH_ASSIGNMENT        shift, and go to state 143
    MODULO_ASSIGNMENT       shift, and go to state 144
    PLUS_ASSIGNMENT         shift, and go to state 145
    MINUS_ASSIGNMENT        shift, and go to state 146
    LEFT_SHIFT_ASSIGNMENT   shift, and go to state 147
    RIGHT_SHIFT_ASSIGNMENT  shift, and go to state 148
    BITWISE_AND_ASSIGNMENT  shift, and go to state 149
    BITWISE_OR_ASSIGNMENT   shift, and go to state 150
    BITWISE_XOR_ASSIGNMENT  shift, and go to state 151

    $default  reduce using rule 32 (cast_expression)

    assignment_operator  go to state 152


State 89

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   23                 | unary_operator • cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression  go to state 86
    postfix_expression  go to state 87
    unary_expression    go to state 153
    unary_operator      go to state 89
    cast_expression     go to state 154


State 90

   34 multiplicative_expression: cast_expression •

    $default  reduce using rule 34 (multiplicative_expression)


State 91

   35 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   36                          | multiplicative_expression • SLASH cast_expression
   37                          | multiplicative_expression • MODULO cast_expression
   38 additive_expression: multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 155
    ASTERISK  shift, and go to state 156
    MODULO    shift, and go to state 157

    $default  reduce using rule 38 (additive_expression)


State 92

   39 additive_expression: additive_expression • PLUS multiplicative_expression
   40                    | additive_expression • MINUS multiplicative_expression
   41 shift_expression: additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 158
    MINUS  shift, and go to state 159

    $default  reduce using rule 41 (shift_expression)


State 93

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   44 relational_expression: shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 160
    RIGHT_SHIFT  shift, and go to state 161

    $default  reduce using rule 44 (relational_expression)


State 94

   45 relational_expression: relational_expression • LESS_THAN shift_expression
   46                      | relational_expression • GREATER_THAN shift_expression
   47                      | relational_expression • LESS_EQUAL_THAN shift_expression
   48                      | relational_expression • GREATER_EQUAL_THAN shift_expression
   49 equality_expression: relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 162
    GREATER_THAN        shift, and go to state 163
    LESS_EQUAL_THAN     shift, and go to state 164
    GREATER_EQUAL_THAN  shift, and go to state 165

    $default  reduce using rule 49 (equality_expression)


State 95

   50 equality_expression: equality_expression • EQUALS relational_expression
   51                    | equality_expression • NOT_EQUALS relational_expression
   52 AND_expression: equality_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 166
    NOT_EQUALS  shift, and go to state 167

    $default  reduce using rule 52 (AND_expression)


State 96

   53 AND_expression: AND_expression • BITWISE_AND equality_expression
   54 exclusive_OR_expression: AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_AND  shift, and go to state 168

    $default  reduce using rule 54 (exclusive_OR_expression)


State 97

   55 exclusive_OR_expression: exclusive_OR_expression • BITWISE_XOR AND_expression
   56 inclusive_OR_expression: exclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_XOR  shift, and go to state 169

    $default  reduce using rule 56 (inclusive_OR_expression)


State 98

   57 inclusive_OR_expression: inclusive_OR_expression • BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: inclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    BITWISE_OR  shift, and go to state 170

    $default  reduce using rule 60 (logical_AND_expression)


State 99

   61 logical_AND_expression: logical_AND_expression • LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: logical_AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 171

    $default  reduce using rule 62 (logical_OR_expression)


State 100

   59 N: ε •  [QUESTION_MARK]
   63 logical_OR_expression: logical_OR_expression • LOGICAL_OR M logical_AND_expression
   64 conditional_expression: logical_OR_expression •  [COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES]
   65                       | logical_OR_expression • N QUESTION_MARK M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 172

    QUESTION_MARK  reduce using rule 59 (N)
    $default       reduce using rule 64 (conditional_expression)

    N  go to state 173


State 101

   66 assignment_expression: conditional_expression •

    $default  reduce using rule 66 (assignment_expression)


State 102

  158 initialiser: assignment_expression •

    $default  reduce using rule 158 (initialiser)


State 103

   94 init_declarator: declarator ASSIGNMENT initialiser •

    $default  reduce using rule 94 (init_declarator)


State 104

  204 function_definition: declaration_specifiers declarator declaration_list_opt change_scope • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 174


State 105

  208 declaration_list: declaration_list declaration •

    $default  reduce using rule 208 (declaration_list)


State 106

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  135 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC • type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | direct_declarator LEFT_SQUARE_BRACKET STATIC • assignment_expression RIGHT_SQUARE_BRACKET
  147 type_qualifier_list: • type_qualifier
  148                    | • type_qualifier_list type_qualifier

    CONST               shift, and go to state 3
    RESTRICT            shift, and go to state 12
    SIZEOF              shift, and go to state 70
    VOLATILE            shift, and go to state 18
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 175
    type_qualifier             go to state 49
    type_qualifier_list        go to state 176


State 107

  134 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 134 (direct_declarator)


State 108

   27 unary_operator: ASTERISK •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  139 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET ASTERISK • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 177

    $default  reduce using rule 27 (unary_operator)


State 109

  133 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 178


State 110

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  131 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • assignment_expression RIGHT_SQUARE_BRACKET
  132                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • RIGHT_SQUARE_BRACKET
  137                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • ASTERISK RIGHT_SQUARE_BRACKET
  148 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST                 shift, and go to state 3
    RESTRICT              shift, and go to state 12
    SIZEOF                shift, and go to state 70
    STATIC                shift, and go to state 179
    VOLATILE              shift, and go to state 18
    IDENTIFIER            shift, and go to state 71
    INTEGER_CONSTANT      shift, and go to state 72
    FLOATING_CONSTANT     shift, and go to state 73
    CHARACTER_CONSTANT    shift, and go to state 74
    STRING_LITERAL        shift, and go to state 75
    INCREMENT             shift, and go to state 76
    RIGHT_SQUARE_BRACKET  shift, and go to state 180
    LEFT_PARENTHESES      shift, and go to state 77
    ASTERISK              shift, and go to state 181
    PLUS                  shift, and go to state 80
    MINUS                 shift, and go to state 81
    TILDE                 shift, and go to state 82
    EXCLAMATION           shift, and go to state 83
    DECREMENT             shift, and go to state 84
    BITWISE_AND           shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 182
    type_qualifier             go to state 67


State 111

  155 identifier_list: IDENTIFIER •

    $default  reduce using rule 155 (identifier_list)


State 112

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  140 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope • parameter_type_list RIGHT_PARENTHESES
  142                  | direct_declarator LEFT_PARENTHESES change_scope • RIGHT_PARENTHESES
  149 parameter_type_list: • parameter_list
  150                    | • parameter_list COMMA ELLIPSIS
  151 parameter_list: • parameter_declaration
  152               | • parameter_list COMMA parameter_declaration
  153 parameter_declaration: • declaration_specifiers declarator
  154                      | • declaration_specifiers

    AUTO               shift, and go to state 1
    CHARTYPE           shift, and go to state 2
    CONST              shift, and go to state 3
    DOUBLE             shift, and go to state 4
    ENUM               shift, and go to state 5
    EXTERN             shift, and go to state 6
    FLOATTYPE          shift, and go to state 7
    INLINE             shift, and go to state 8
    INTTYPE            shift, and go to state 9
    LONG               shift, and go to state 10
    REGISTER           shift, and go to state 11
    RESTRICT           shift, and go to state 12
    SHORT              shift, and go to state 13
    SIGNED             shift, and go to state 14
    STATIC             shift, and go to state 15
    UNSIGNED           shift, and go to state 16
    VOIDTYPE           shift, and go to state 17
    VOLATILE           shift, and go to state 18
    RIGHT_PARENTHESES  shift, and go to state 183

    declaration_specifiers   go to state 184
    storage_class_specifier  go to state 21
    type_specifier           go to state 22
    enum_specifier           go to state 23
    type_qualifier           go to state 24
    function_specifier       go to state 25
    parameter_type_list      go to state 185
    parameter_list           go to state 186
    parameter_declaration    go to state 187


State 113

  141 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list • RIGHT_PARENTHESES
  156 identifier_list: identifier_list • COMMA IDENTIFIER

    COMMA              shift, and go to state 188
    RIGHT_PARENTHESES  shift, and go to state 189


State 114

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   81 constant_expression: • conditional_expression
  121 enumerator: IDENTIFIER ASSIGNMENT • constant_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 190
    constant_expression        go to state 191


State 115

  114 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA • RIGHT_CURLY_BRACKET
  119 enumerator_list: enumerator_list COMMA • enumerator
  120 enumerator: • IDENTIFIER
  121           | • IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER           shift, and go to state 62
    RIGHT_CURLY_BRACKET  shift, and go to state 192

    enumerator  go to state 193


State 116

  113 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 113 (enum_specifier)


State 117

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6                   | LEFT_PARENTHESES • expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25                 | SIZEOF LEFT_PARENTHESES • type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  109 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  110                         | • type_qualifier specifier_qualifier_list_opt
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  157 type_name: • specifier_qualifier_list

    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOATTYPE           shift, and go to state 7
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 70
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 122
    type_specifier             go to state 123
    specifier_qualifier_list   go to state 124
    enum_specifier             go to state 23
    type_qualifier             go to state 125
    type_name                  go to state 194


State 118

   24 unary_expression: SIZEOF unary_expression •

    $default  reduce using rule 24 (unary_expression)


State 119

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6                   | LEFT_PARENTHESES • expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  109 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  110                         | • type_qualifier specifier_qualifier_list_opt
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  157 type_name: • specifier_qualifier_list

    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOATTYPE           shift, and go to state 7
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 70
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 122
    type_specifier             go to state 123
    specifier_qualifier_list   go to state 124
    enum_specifier             go to state 23
    type_qualifier             go to state 125
    type_name                  go to state 195


State 120

   21 unary_expression: INCREMENT unary_expression •

    $default  reduce using rule 21 (unary_expression)


State 121

   79 expression: assignment_expression •

    $default  reduce using rule 79 (expression)


State 122

    6 primary_expression: LEFT_PARENTHESES expression • RIGHT_PARENTHESES
   80 expression: expression • COMMA assignment_expression

    COMMA              shift, and go to state 196
    RIGHT_PARENTHESES  shift, and go to state 197


State 123

   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  109 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  109                         | type_specifier • specifier_qualifier_list_opt
  110                         | • type_qualifier specifier_qualifier_list_opt
  111 specifier_qualifier_list_opt: • specifier_qualifier_list
  112                             | ε •  [RIGHT_PARENTHESES]
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE

    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    FLOATTYPE  shift, and go to state 7
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18

    $default  reduce using rule 112 (specifier_qualifier_list_opt)

    type_specifier                go to state 123
    specifier_qualifier_list      go to state 198
    specifier_qualifier_list_opt  go to state 199
    enum_specifier                go to state 23
    type_qualifier                go to state 125


State 124

  157 type_name: specifier_qualifier_list •

    $default  reduce using rule 157 (type_name)


State 125

   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  109 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  110                         | • type_qualifier specifier_qualifier_list_opt
  110                         | type_qualifier • specifier_qualifier_list_opt
  111 specifier_qualifier_list_opt: • specifier_qualifier_list
  112                             | ε •  [RIGHT_PARENTHESES]
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE

    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    FLOATTYPE  shift, and go to state 7
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18

    $default  reduce using rule 112 (specifier_qualifier_list_opt)

    type_specifier                go to state 123
    specifier_qualifier_list      go to state 198
    specifier_qualifier_list_opt  go to state 200
    enum_specifier                go to state 23
    type_qualifier                go to state 125


State 126

   14 postfix_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   33 cast_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES cast_expression

    RIGHT_PARENTHESES  shift, and go to state 201


State 127

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   81 constant_expression: • conditional_expression
  168 designator: LEFT_SQUARE_BRACKET • constant_expression RIGHT_SQUARE_BRACKET

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 190
    constant_expression        go to state 202


State 128

  169 designator: DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 203


State 129

  159 initialiser: LEFT_CURLY_BRACKET initialiser_list • RIGHT_CURLY_BRACKET
  160            | LEFT_CURLY_BRACKET initialiser_list • COMMA RIGHT_CURLY_BRACKET
  162 initialiser_list: initialiser_list • COMMA designation_opt initialiser

    COMMA                shift, and go to state 204
    RIGHT_CURLY_BRACKET  shift, and go to state 205


State 130

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
  158 initialiser: • assignment_expression
  159            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  160            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  161 initialiser_list: designation_opt • initialiser

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 78
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 102
    initialiser                go to state 206


State 131

  163 designation_opt: designation •

    $default  reduce using rule 163 (designation_opt)


State 132

  165 designation: designator_list • ASSIGNMENT
  167 designator_list: designator_list • designator
  168 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  169           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 127
    ASSIGNMENT           shift, and go to state 207
    DOT                  shift, and go to state 128

    designator  go to state 208


State 133

  166 designator_list: designator •

    $default  reduce using rule 166 (designator_list)


State 134

   22 unary_expression: DECREMENT unary_expression •

    $default  reduce using rule 22 (unary_expression)


State 135

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | postfix_expression LEFT_SQUARE_BRACKET • expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 209


State 136

   12 postfix_expression: postfix_expression INCREMENT •

    $default  reduce using rule 12 (postfix_expression)


State 137

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | postfix_expression LEFT_PARENTHESES • argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 argument_expression_list_opt: • argument_expression_list
   17                             | ε •  [RIGHT_PARENTHESES]
   18 argument_expression_list: • assignment_expression
   19                         | • argument_expression_list COMMA assignment_expression
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 17 (argument_expression_list_opt)

    primary_expression            go to state 86
    postfix_expression            go to state 87
    argument_expression_list_opt  go to state 210
    argument_expression_list      go to state 211
    unary_expression              go to state 88
    unary_operator                go to state 89
    cast_expression               go to state 90
    multiplicative_expression     go to state 91
    additive_expression           go to state 92
    shift_expression              go to state 93
    relational_expression         go to state 94
    equality_expression           go to state 95
    AND_expression                go to state 96
    exclusive_OR_expression       go to state 97
    inclusive_OR_expression       go to state 98
    logical_AND_expression        go to state 99
    logical_OR_expression         go to state 100
    conditional_expression        go to state 101
    assignment_expression         go to state 212


State 138

   10 postfix_expression: postfix_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 213


State 139

   11 postfix_expression: postfix_expression ARROW • IDENTIFIER

    IDENTIFIER  shift, and go to state 214


State 140

   13 postfix_expression: postfix_expression DECREMENT •

    $default  reduce using rule 13 (postfix_expression)


State 141

   68 assignment_operator: ASSIGNMENT •

    $default  reduce using rule 68 (assignment_operator)


State 142

   69 assignment_operator: ASTERISK_ASSIGNMENT •

    $default  reduce using rule 69 (assignment_operator)


State 143

   70 assignment_operator: SLASH_ASSIGNMENT •

    $default  reduce using rule 70 (assignment_operator)


State 144

   71 assignment_operator: MODULO_ASSIGNMENT •

    $default  reduce using rule 71 (assignment_operator)


State 145

   72 assignment_operator: PLUS_ASSIGNMENT •

    $default  reduce using rule 72 (assignment_operator)


State 146

   73 assignment_operator: MINUS_ASSIGNMENT •

    $default  reduce using rule 73 (assignment_operator)


State 147

   74 assignment_operator: LEFT_SHIFT_ASSIGNMENT •

    $default  reduce using rule 74 (assignment_operator)


State 148

   75 assignment_operator: RIGHT_SHIFT_ASSIGNMENT •

    $default  reduce using rule 75 (assignment_operator)


State 149

   76 assignment_operator: BITWISE_AND_ASSIGNMENT •

    $default  reduce using rule 76 (assignment_operator)


State 150

   78 assignment_operator: BITWISE_OR_ASSIGNMENT •

    $default  reduce using rule 78 (assignment_operator)


State 151

   77 assignment_operator: BITWISE_XOR_ASSIGNMENT •

    $default  reduce using rule 77 (assignment_operator)


State 152

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   67                      | unary_expression assignment_operator • assignment_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 215


State 153

   32 cast_expression: unary_expression •

    $default  reduce using rule 32 (cast_expression)


State 154

   23 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 23 (unary_expression)


State 155

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   36 multiplicative_expression: multiplicative_expression SLASH • cast_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression  go to state 86
    postfix_expression  go to state 87
    unary_expression    go to state 153
    unary_operator      go to state 89
    cast_expression     go to state 216


State 156

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   35 multiplicative_expression: multiplicative_expression ASTERISK • cast_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression  go to state 86
    postfix_expression  go to state 87
    unary_expression    go to state 153
    unary_operator      go to state 89
    cast_expression     go to state 217


State 157

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   37 multiplicative_expression: multiplicative_expression MODULO • cast_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression  go to state 86
    postfix_expression  go to state 87
    unary_expression    go to state 153
    unary_operator      go to state 89
    cast_expression     go to state 218


State 158

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: additive_expression PLUS • multiplicative_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 219


State 159

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   40 additive_expression: additive_expression MINUS • multiplicative_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 220


State 160

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   42 shift_expression: shift_expression LEFT_SHIFT • additive_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 221


State 161

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   43 shift_expression: shift_expression RIGHT_SHIFT • additive_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 222


State 162

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   45 relational_expression: relational_expression LESS_THAN • shift_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 223


State 163

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   46 relational_expression: relational_expression GREATER_THAN • shift_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 224


State 164

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   47 relational_expression: relational_expression LESS_EQUAL_THAN • shift_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 225


State 165

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   48 relational_expression: relational_expression GREATER_EQUAL_THAN • shift_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 226


State 166

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   50 equality_expression: equality_expression EQUALS • relational_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 227


State 167

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   51 equality_expression: equality_expression NOT_EQUALS • relational_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 228


State 168

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   53 AND_expression: AND_expression BITWISE_AND • equality_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 229


State 169

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   55 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR • AND_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 230


State 170

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   57 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR • exclusive_OR_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 231


State 171

   58 M: ε •
   61 logical_AND_expression: logical_AND_expression LOGICAL_AND • M inclusive_OR_expression

    $default  reduce using rule 58 (M)

    M  go to state 232


State 172

   58 M: ε •
   63 logical_OR_expression: logical_OR_expression LOGICAL_OR • M logical_AND_expression

    $default  reduce using rule 58 (M)

    M  go to state 233


State 173

   65 conditional_expression: logical_OR_expression N • QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 234


State 174

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
   82 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  180 block_item_list_opt: • block_item_list
  181                    | ε •  [RIGHT_CURLY_BRACKET]
  182 block_item_list: • block_item
  183                | • block_item_list M block_item
  184 block_item: • declaration
  185           | • statement
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON
  204 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET • block_item_list_opt RIGHT_CURLY_BRACKET

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOATTYPE           shift, and go to state 7
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    INLINE              shift, and go to state 8
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 243
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 70
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 244
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    SEMI_COLON  reduce using rule 188 (expression_opt)
    $default    reduce using rule 181 (block_item_list_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    declaration                go to state 249
    declaration_specifiers     go to state 56
    storage_class_specifier    go to state 21
    type_specifier             go to state 22
    enum_specifier             go to state 23
    type_qualifier             go to state 24
    function_specifier         go to state 25
    statement                  go to state 250
    labeled_statement          go to state 251
    compound_statement         go to state 252
    block_item_list_opt        go to state 253
    block_item_list            go to state 254
    block_item                 go to state 255
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 175

  136 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 261


State 176

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  135 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list • assignment_expression RIGHT_SQUARE_BRACKET
  148 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST               shift, and go to state 3
    RESTRICT            shift, and go to state 12
    SIZEOF              shift, and go to state 70
    VOLATILE            shift, and go to state 18
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 262
    type_qualifier             go to state 67


State 177

  139 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 139 (direct_declarator)


State 178

  133 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 133 (direct_declarator)


State 179

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
  137 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC • assignment_expression RIGHT_SQUARE_BRACKET

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 263


State 180

  132 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 132 (direct_declarator)


State 181

   27 unary_operator: ASTERISK •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  138 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 264

    $default  reduce using rule 27 (unary_operator)


State 182

  131 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 265


State 183

  142 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES •

    $default  reduce using rule 142 (direct_declarator)


State 184

  126 declarator: • pointer direct_declarator
  127           | • direct_declarator
  129 direct_declarator: • IDENTIFIER
  130                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  131                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  141                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  145 pointer: • ASTERISK type_qualifier_list_opt
  146        | • ASTERISK type_qualifier_list_opt pointer
  153 parameter_declaration: declaration_specifiers • declarator
  154                      | declaration_specifiers •  [COMMA, RIGHT_PARENTHESES]

    IDENTIFIER        shift, and go to state 31
    LEFT_PARENTHESES  shift, and go to state 32
    ASTERISK          shift, and go to state 33

    $default  reduce using rule 154 (parameter_declaration)

    declarator         go to state 266
    direct_declarator  go to state 38
    pointer            go to state 39


State 185

  140 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 267


State 186

  149 parameter_type_list: parameter_list •  [RIGHT_PARENTHESES]
  150                    | parameter_list • COMMA ELLIPSIS
  152 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 268

    $default  reduce using rule 149 (parameter_type_list)


State 187

  151 parameter_list: parameter_declaration •

    $default  reduce using rule 151 (parameter_list)


State 188

  156 identifier_list: identifier_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 269


State 189

  141 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES •

    $default  reduce using rule 141 (direct_declarator)


State 190

   81 constant_expression: conditional_expression •

    $default  reduce using rule 81 (constant_expression)


State 191

  121 enumerator: IDENTIFIER ASSIGNMENT constant_expression •

    $default  reduce using rule 121 (enumerator)


State 192

  114 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 114 (enum_specifier)


State 193

  119 enumerator_list: enumerator_list COMMA enumerator •

    $default  reduce using rule 119 (enumerator_list)


State 194

   14 postfix_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   25 unary_expression: SIZEOF LEFT_PARENTHESES type_name • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 270


State 195

   14 postfix_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    RIGHT_PARENTHESES  shift, and go to state 271


State 196

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   80 expression: expression COMMA • assignment_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 272


State 197

    6 primary_expression: LEFT_PARENTHESES expression RIGHT_PARENTHESES •

    $default  reduce using rule 6 (primary_expression)


State 198

  111 specifier_qualifier_list_opt: specifier_qualifier_list •

    $default  reduce using rule 111 (specifier_qualifier_list_opt)


State 199

  109 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt •

    $default  reduce using rule 109 (specifier_qualifier_list)


State 200

  110 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt •

    $default  reduce using rule 110 (specifier_qualifier_list)


State 201

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33                | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • cast_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 273
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression  go to state 86
    postfix_expression  go to state 87
    unary_expression    go to state 153
    unary_operator      go to state 89
    cast_expression     go to state 274


State 202

  168 designator: LEFT_SQUARE_BRACKET constant_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 275


State 203

  169 designator: DOT IDENTIFIER •

    $default  reduce using rule 169 (designator)


State 204

  160 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA • RIGHT_CURLY_BRACKET
  162 initialiser_list: initialiser_list COMMA • designation_opt initialiser
  163 designation_opt: • designation
  164                | ε •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  165 designation: • designator_list ASSIGNMENT
  166 designator_list: • designator
  167                | • designator_list designator
  168 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  169           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 127
    RIGHT_CURLY_BRACKET  shift, and go to state 276
    DOT                  shift, and go to state 128

    $default  reduce using rule 164 (designation_opt)

    designation_opt  go to state 277
    designation      go to state 131
    designator_list  go to state 132
    designator       go to state 133


State 205

  159 initialiser: LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 159 (initialiser)


State 206

  161 initialiser_list: designation_opt initialiser •

    $default  reduce using rule 161 (initialiser_list)


State 207

  165 designation: designator_list ASSIGNMENT •

    $default  reduce using rule 165 (designation)


State 208

  167 designator_list: designator_list designator •

    $default  reduce using rule 167 (designator_list)


State 209

    8 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression • RIGHT_SQUARE_BRACKET
   80 expression: expression • COMMA assignment_expression

    COMMA                 shift, and go to state 196
    RIGHT_SQUARE_BRACKET  shift, and go to state 278


State 210

    9 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 279


State 211

   16 argument_expression_list_opt: argument_expression_list •  [RIGHT_PARENTHESES]
   19 argument_expression_list: argument_expression_list • COMMA assignment_expression

    COMMA  shift, and go to state 280

    $default  reduce using rule 16 (argument_expression_list_opt)


State 212

   18 argument_expression_list: assignment_expression •

    $default  reduce using rule 18 (argument_expression_list)


State 213

   10 postfix_expression: postfix_expression DOT IDENTIFIER •

    $default  reduce using rule 10 (postfix_expression)


State 214

   11 postfix_expression: postfix_expression ARROW IDENTIFIER •

    $default  reduce using rule 11 (postfix_expression)


State 215

   67 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 67 (assignment_expression)


State 216

   36 multiplicative_expression: multiplicative_expression SLASH cast_expression •

    $default  reduce using rule 36 (multiplicative_expression)


State 217

   35 multiplicative_expression: multiplicative_expression ASTERISK cast_expression •

    $default  reduce using rule 35 (multiplicative_expression)


State 218

   37 multiplicative_expression: multiplicative_expression MODULO cast_expression •

    $default  reduce using rule 37 (multiplicative_expression)


State 219

   35 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   36                          | multiplicative_expression • SLASH cast_expression
   37                          | multiplicative_expression • MODULO cast_expression
   39 additive_expression: additive_expression PLUS multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 155
    ASTERISK  shift, and go to state 156
    MODULO    shift, and go to state 157

    $default  reduce using rule 39 (additive_expression)


State 220

   35 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   36                          | multiplicative_expression • SLASH cast_expression
   37                          | multiplicative_expression • MODULO cast_expression
   40 additive_expression: additive_expression MINUS multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 155
    ASTERISK  shift, and go to state 156
    MODULO    shift, and go to state 157

    $default  reduce using rule 40 (additive_expression)


State 221

   39 additive_expression: additive_expression • PLUS multiplicative_expression
   40                    | additive_expression • MINUS multiplicative_expression
   42 shift_expression: shift_expression LEFT_SHIFT additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 158
    MINUS  shift, and go to state 159

    $default  reduce using rule 42 (shift_expression)


State 222

   39 additive_expression: additive_expression • PLUS multiplicative_expression
   40                    | additive_expression • MINUS multiplicative_expression
   43 shift_expression: shift_expression RIGHT_SHIFT additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 158
    MINUS  shift, and go to state 159

    $default  reduce using rule 43 (shift_expression)


State 223

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   45 relational_expression: relational_expression LESS_THAN shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 160
    RIGHT_SHIFT  shift, and go to state 161

    $default  reduce using rule 45 (relational_expression)


State 224

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   46 relational_expression: relational_expression GREATER_THAN shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 160
    RIGHT_SHIFT  shift, and go to state 161

    $default  reduce using rule 46 (relational_expression)


State 225

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   47 relational_expression: relational_expression LESS_EQUAL_THAN shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 160
    RIGHT_SHIFT  shift, and go to state 161

    $default  reduce using rule 47 (relational_expression)


State 226

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   48 relational_expression: relational_expression GREATER_EQUAL_THAN shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 160
    RIGHT_SHIFT  shift, and go to state 161

    $default  reduce using rule 48 (relational_expression)


State 227

   45 relational_expression: relational_expression • LESS_THAN shift_expression
   46                      | relational_expression • GREATER_THAN shift_expression
   47                      | relational_expression • LESS_EQUAL_THAN shift_expression
   48                      | relational_expression • GREATER_EQUAL_THAN shift_expression
   50 equality_expression: equality_expression EQUALS relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 162
    GREATER_THAN        shift, and go to state 163
    LESS_EQUAL_THAN     shift, and go to state 164
    GREATER_EQUAL_THAN  shift, and go to state 165

    $default  reduce using rule 50 (equality_expression)


State 228

   45 relational_expression: relational_expression • LESS_THAN shift_expression
   46                      | relational_expression • GREATER_THAN shift_expression
   47                      | relational_expression • LESS_EQUAL_THAN shift_expression
   48                      | relational_expression • GREATER_EQUAL_THAN shift_expression
   51 equality_expression: equality_expression NOT_EQUALS relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 162
    GREATER_THAN        shift, and go to state 163
    LESS_EQUAL_THAN     shift, and go to state 164
    GREATER_EQUAL_THAN  shift, and go to state 165

    $default  reduce using rule 51 (equality_expression)


State 229

   50 equality_expression: equality_expression • EQUALS relational_expression
   51                    | equality_expression • NOT_EQUALS relational_expression
   53 AND_expression: AND_expression BITWISE_AND equality_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 166
    NOT_EQUALS  shift, and go to state 167

    $default  reduce using rule 53 (AND_expression)


State 230

   53 AND_expression: AND_expression • BITWISE_AND equality_expression
   55 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_AND  shift, and go to state 168

    $default  reduce using rule 55 (exclusive_OR_expression)


State 231

   55 exclusive_OR_expression: exclusive_OR_expression • BITWISE_XOR AND_expression
   57 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR exclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_XOR  shift, and go to state 169

    $default  reduce using rule 57 (inclusive_OR_expression)


State 232

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   61 logical_AND_expression: logical_AND_expression LOGICAL_AND M • inclusive_OR_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 281


State 233

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   63 logical_OR_expression: logical_OR_expression LOGICAL_OR M • logical_AND_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 282


State 234

   58 M: ε •
   65 conditional_expression: logical_OR_expression N QUESTION_MARK • M expression N COLON M conditional_expression

    $default  reduce using rule 58 (M)

    M  go to state 283


State 235

  198 jump_statement: BREAK • SEMI_COLON

    SEMI_COLON  shift, and go to state 284


State 236

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   81 constant_expression: • conditional_expression
  177 labeled_statement: CASE • constant_expression COLON statement

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 190
    constant_expression        go to state 285


State 237

  197 jump_statement: CONTINUE • SEMI_COLON

    SEMI_COLON  shift, and go to state 286


State 238

  178 labeled_statement: DEFAULT • COLON statement

    COLON  shift, and go to state 287


State 239

   58 M: ε •
  193 iteration_statement: DO • M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    $default  reduce using rule 58 (M)

    M  go to state 288


State 240

  194 iteration_statement: FOR • LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | FOR • LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    LEFT_PARENTHESES  shift, and go to state 289


State 241

  196 jump_statement: GOTO • IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 290


State 242

  189 selection_statement: IF • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | IF • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement

    LEFT_PARENTHESES  shift, and go to state 291


State 243

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  199 jump_statement: RETURN • expression_opt SEMI_COLON

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    expression_opt             go to state 292


State 244

  191 selection_statement: SWITCH • LEFT_PARENTHESES expression RIGHT_PARENTHESES statement

    LEFT_PARENTHESES  shift, and go to state 293


State 245

   58 M: ε •
  192 iteration_statement: WHILE • M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement

    $default  reduce using rule 58 (M)

    M  go to state 294


State 246

    1 primary_expression: IDENTIFIER •  [LEFT_SQUARE_BRACKET, INCREMENT, SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, LEFT_PARENTHESES, DOT, ARROW, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, SEMI_COLON, ASTERISK_ASSIGNMENT, SLASH_ASSIGNMENT, MODULO_ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, DECREMENT, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, RIGHT_SHIFT_ASSIGNMENT, NOT_EQUALS, BITWISE_AND_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT]
  176 labeled_statement: IDENTIFIER • COLON statement

    COLON  shift, and go to state 295

    $default  reduce using rule 1 (primary_expression)


State 247

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
   82 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  179                   | LEFT_CURLY_BRACKET • block_item_list_opt RIGHT_CURLY_BRACKET
  180 block_item_list_opt: • block_item_list
  181                    | ε •  [RIGHT_CURLY_BRACKET]
  182 block_item_list: • block_item
  183                | • block_item_list M block_item
  184 block_item: • declaration
  185           | • statement
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOATTYPE           shift, and go to state 7
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    INLINE              shift, and go to state 8
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 243
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 70
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 244
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    SEMI_COLON  reduce using rule 188 (expression_opt)
    $default    reduce using rule 181 (block_item_list_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    declaration                go to state 249
    declaration_specifiers     go to state 56
    storage_class_specifier    go to state 21
    type_specifier             go to state 22
    enum_specifier             go to state 23
    type_qualifier             go to state 24
    function_specifier         go to state 25
    statement                  go to state 250
    labeled_statement          go to state 251
    compound_statement         go to state 252
    block_item_list_opt        go to state 296
    block_item_list            go to state 254
    block_item                 go to state 255
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 248

   80 expression: expression • COMMA assignment_expression
  187 expression_opt: expression •  [SEMI_COLON, RIGHT_PARENTHESES]

    COMMA  shift, and go to state 196

    $default  reduce using rule 187 (expression_opt)


State 249

  184 block_item: declaration •

    $default  reduce using rule 184 (block_item)


State 250

  185 block_item: statement •

    $default  reduce using rule 185 (block_item)


State 251

  170 statement: labeled_statement •

    $default  reduce using rule 170 (statement)


State 252

  171 statement: compound_statement •

    $default  reduce using rule 171 (statement)


State 253

  204 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt • RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 297


State 254

   58 M: ε •  [AUTO, BREAK, CASE, CHARTYPE, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ENUM, EXTERN, FLOATTYPE, FOR, GOTO, IF, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, RETURN, SHORT, SIGNED, SIZEOF, STATIC, SWITCH, UNSIGNED, VOIDTYPE, VOLATILE, WHILE, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, SEMI_COLON, DECREMENT, BITWISE_AND]
  180 block_item_list_opt: block_item_list •  [RIGHT_CURLY_BRACKET]
  183 block_item_list: block_item_list • M block_item

    RIGHT_CURLY_BRACKET  reduce using rule 180 (block_item_list_opt)
    $default             reduce using rule 58 (M)

    M  go to state 298


State 255

  182 block_item_list: block_item •

    $default  reduce using rule 182 (block_item_list)


State 256

  172 statement: expression_statement •

    $default  reduce using rule 172 (statement)


State 257

  186 expression_statement: expression_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 299


State 258

  173 statement: selection_statement •

    $default  reduce using rule 173 (statement)


State 259

  174 statement: iteration_statement •

    $default  reduce using rule 174 (statement)


State 260

  175 statement: jump_statement •

    $default  reduce using rule 175 (statement)


State 261

  136 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 136 (direct_declarator)


State 262

  135 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 300


State 263

  137 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 301


State 264

  138 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 138 (direct_declarator)


State 265

  131 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 131 (direct_declarator)


State 266

  153 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 153 (parameter_declaration)


State 267

  140 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES •

    $default  reduce using rule 140 (direct_declarator)


State 268

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  150 parameter_type_list: parameter_list COMMA • ELLIPSIS
  152 parameter_list: parameter_list COMMA • parameter_declaration
  153 parameter_declaration: • declaration_specifiers declarator
  154                      | • declaration_specifiers

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    FLOATTYPE  shift, and go to state 7
    INLINE     shift, and go to state 8
    INTTYPE    shift, and go to state 9
    LONG       shift, and go to state 10
    REGISTER   shift, and go to state 11
    RESTRICT   shift, and go to state 12
    SHORT      shift, and go to state 13
    SIGNED     shift, and go to state 14
    STATIC     shift, and go to state 15
    UNSIGNED   shift, and go to state 16
    VOIDTYPE   shift, and go to state 17
    VOLATILE   shift, and go to state 18
    ELLIPSIS   shift, and go to state 302

    declaration_specifiers   go to state 184
    storage_class_specifier  go to state 21
    type_specifier           go to state 22
    enum_specifier           go to state 23
    type_qualifier           go to state 24
    function_specifier       go to state 25
    parameter_declaration    go to state 303


State 269

  156 identifier_list: identifier_list COMMA IDENTIFIER •

    $default  reduce using rule 156 (identifier_list)


State 270

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   25 unary_expression: SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES •  [SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, ASTERISK_ASSIGNMENT, SLASH_ASSIGNMENT, MODULO_ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, RIGHT_SHIFT_ASSIGNMENT, NOT_EQUALS, BITWISE_AND_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT]

    LEFT_CURLY_BRACKET  shift, and go to state 273

    $default  reduce using rule 25 (unary_expression)


State 271

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 273


State 272

   80 expression: expression COMMA assignment_expression •

    $default  reduce using rule 80 (expression)


State 273

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET • initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET • initialiser_list COMMA RIGHT_CURLY_BRACKET
  161 initialiser_list: • designation_opt initialiser
  162                 | • initialiser_list COMMA designation_opt initialiser
  163 designation_opt: • designation
  164                | ε •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  165 designation: • designator_list ASSIGNMENT
  166 designator_list: • designator
  167                | • designator_list designator
  168 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  169           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 127
    DOT                  shift, and go to state 128

    $default  reduce using rule 164 (designation_opt)

    initialiser_list  go to state 304
    designation_opt   go to state 130
    designation       go to state 131
    designator_list   go to state 132
    designator        go to state 133


State 274

   33 cast_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression •

    $default  reduce using rule 33 (cast_expression)


State 275

  168 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 168 (designator)


State 276

  160 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 160 (initialiser)


State 277

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
  158 initialiser: • assignment_expression
  159            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  160            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  162 initialiser_list: initialiser_list COMMA designation_opt • initialiser

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 78
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 102
    initialiser                go to state 305


State 278

    8 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 8 (postfix_expression)


State 279

    9 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES •

    $default  reduce using rule 9 (postfix_expression)


State 280

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 argument_expression_list: argument_expression_list COMMA • assignment_expression
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 306


State 281

   57 inclusive_OR_expression: inclusive_OR_expression • BITWISE_OR exclusive_OR_expression
   61 logical_AND_expression: logical_AND_expression LOGICAL_AND M inclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    BITWISE_OR  shift, and go to state 170

    $default  reduce using rule 61 (logical_AND_expression)


State 282

   61 logical_AND_expression: logical_AND_expression • LOGICAL_AND M inclusive_OR_expression
   63 logical_OR_expression: logical_OR_expression LOGICAL_OR M logical_AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 171

    $default  reduce using rule 63 (logical_OR_expression)


State 283

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65                       | logical_OR_expression N QUESTION_MARK M • expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 307


State 284

  198 jump_statement: BREAK SEMI_COLON •

    $default  reduce using rule 198 (jump_statement)


State 285

  177 labeled_statement: CASE constant_expression • COLON statement

    COLON  shift, and go to state 308


State 286

  197 jump_statement: CONTINUE SEMI_COLON •

    $default  reduce using rule 197 (jump_statement)


State 287

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  178                  | DEFAULT COLON • statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 309
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 288

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  193                    | DO M • statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 310
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 289

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
   82 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  194 iteration_statement: FOR LEFT_PARENTHESES • expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | FOR LEFT_PARENTHESES • declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    AUTO                shift, and go to state 1
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOATTYPE           shift, and go to state 7
    INLINE              shift, and go to state 8
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 70
    STATIC              shift, and go to state 15
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    declaration                go to state 311
    declaration_specifiers     go to state 56
    storage_class_specifier    go to state 21
    type_specifier             go to state 22
    enum_specifier             go to state 23
    type_qualifier             go to state 24
    function_specifier         go to state 25
    expression_opt             go to state 312


State 290

  196 jump_statement: GOTO IDENTIFIER • SEMI_COLON

    SEMI_COLON  shift, and go to state 313


State 291

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  189 selection_statement: IF LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement N
  190                    | IF LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement N ELSE M statement

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 314


State 292

  199 jump_statement: RETURN expression_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 315


State 293

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  191 selection_statement: SWITCH LEFT_PARENTHESES • expression RIGHT_PARENTHESES statement

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 316


State 294

  192 iteration_statement: WHILE M • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement

    LEFT_PARENTHESES  shift, and go to state 317


State 295

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  176                  | IDENTIFIER COLON • statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 318
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 296

  179 compound_statement: LEFT_CURLY_BRACKET block_item_list_opt • RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 319


State 297

  204 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET •

    $default  reduce using rule 204 (function_definition)


State 298

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
   82 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   86                       | • type_specifier declaration_specifiers_opt
   87                       | • type_qualifier declaration_specifiers_opt
   88                       | • function_specifier declaration_specifiers_opt
   95 storage_class_specifier: • EXTERN
   96                        | • STATIC
   97                        | • AUTO
   98                        | • REGISTER
   99 type_specifier: • VOIDTYPE
  100               | • CHARTYPE
  101               | • SHORT
  102               | • INTTYPE
  103               | • LONG
  104               | • FLOATTYPE
  105               | • DOUBLE
  106               | • SIGNED
  107               | • UNSIGNED
  108               | • enum_specifier
  113 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  114               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  115               | • ENUM IDENTIFIER
  122 type_qualifier: • CONST
  123               | • RESTRICT
  124               | • VOLATILE
  125 function_specifier: • INLINE
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  183 block_item_list: block_item_list M • block_item
  184 block_item: • declaration
  185           | • statement
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOATTYPE           shift, and go to state 7
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    INLINE              shift, and go to state 8
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 243
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 70
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 244
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    declaration                go to state 249
    declaration_specifiers     go to state 56
    storage_class_specifier    go to state 21
    type_specifier             go to state 22
    enum_specifier             go to state 23
    type_qualifier             go to state 24
    function_specifier         go to state 25
    statement                  go to state 250
    labeled_statement          go to state 251
    compound_statement         go to state 252
    block_item                 go to state 320
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 299

  186 expression_statement: expression_opt SEMI_COLON •

    $default  reduce using rule 186 (expression_statement)


State 300

  135 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 135 (direct_declarator)


State 301

  137 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 137 (direct_declarator)


State 302

  150 parameter_type_list: parameter_list COMMA ELLIPSIS •

    $default  reduce using rule 150 (parameter_type_list)


State 303

  152 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 152 (parameter_list)


State 304

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list • RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list • COMMA RIGHT_CURLY_BRACKET
  162 initialiser_list: initialiser_list • COMMA designation_opt initialiser

    COMMA                shift, and go to state 321
    RIGHT_CURLY_BRACKET  shift, and go to state 322


State 305

  162 initialiser_list: initialiser_list COMMA designation_opt initialiser •

    $default  reduce using rule 162 (initialiser_list)


State 306

   19 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 19 (argument_expression_list)


State 307

   59 N: ε •  [COLON]
   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression • N COLON M conditional_expression
   80 expression: expression • COMMA assignment_expression

    COMMA  shift, and go to state 196

    $default  reduce using rule 59 (N)

    N  go to state 323


State 308

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  177                  | CASE constant_expression COLON • statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 324
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 309

  178 labeled_statement: DEFAULT COLON statement •

    $default  reduce using rule 178 (labeled_statement)


State 310

   58 M: ε •
  193 iteration_statement: DO M statement • M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    $default  reduce using rule 58 (M)

    M  go to state 325


State 311

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  195 iteration_statement: FOR LEFT_PARENTHESES declaration • expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    expression_opt             go to state 326


State 312

  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt • SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 327


State 313

  196 jump_statement: GOTO IDENTIFIER SEMI_COLON •

    $default  reduce using rule 196 (jump_statement)


State 314

   80 expression: expression • COMMA assignment_expression
  189 selection_statement: IF LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement N
  190                    | IF LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement N ELSE M statement

    COMMA              shift, and go to state 196
    RIGHT_PARENTHESES  shift, and go to state 328


State 315

  199 jump_statement: RETURN expression_opt SEMI_COLON •

    $default  reduce using rule 199 (jump_statement)


State 316

   80 expression: expression • COMMA assignment_expression
  191 selection_statement: SWITCH LEFT_PARENTHESES expression • RIGHT_PARENTHESES statement

    COMMA              shift, and go to state 196
    RIGHT_PARENTHESES  shift, and go to state 329


State 317

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  192 iteration_statement: WHILE M LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 330


State 318

  176 labeled_statement: IDENTIFIER COLON statement •

    $default  reduce using rule 176 (labeled_statement)


State 319

  179 compound_statement: LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET •

    $default  reduce using rule 179 (compound_statement)


State 320

  183 block_item_list: block_item_list M block_item •

    $default  reduce using rule 183 (block_item_list)


State 321

   15 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA • RIGHT_CURLY_BRACKET
  162 initialiser_list: initialiser_list COMMA • designation_opt initialiser
  163 designation_opt: • designation
  164                | ε •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  165 designation: • designator_list ASSIGNMENT
  166 designator_list: • designator
  167                | • designator_list designator
  168 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  169           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 127
    RIGHT_CURLY_BRACKET  shift, and go to state 331
    DOT                  shift, and go to state 128

    $default  reduce using rule 164 (designation_opt)

    designation_opt  go to state 277
    designation      go to state 131
    designator_list  go to state 132
    designator       go to state 133


State 322

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 14 (postfix_expression)


State 323

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N • COLON M conditional_expression

    COLON  shift, and go to state 332


State 324

  177 labeled_statement: CASE constant_expression COLON statement •

    $default  reduce using rule 177 (labeled_statement)


State 325

  193 iteration_statement: DO M statement M • WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    WHILE  shift, and go to state 333


State 326

  195 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt • SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    SEMI_COLON  shift, and go to state 334


State 327

   58 M: ε •
  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON • M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 58 (M)

    M  go to state 335


State 328

   58 M: ε •
  189 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement N
  190                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement N ELSE M statement

    $default  reduce using rule 58 (M)

    M  go to state 336


State 329

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  191                    | SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES • statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 337
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 330

   80 expression: expression • COMMA assignment_expression
  192 iteration_statement: WHILE M LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement

    COMMA              shift, and go to state 196
    RIGHT_PARENTHESES  shift, and go to state 338


State 331

   15 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 15 (postfix_expression)


State 332

   58 M: ε •
   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON • M conditional_expression

    $default  reduce using rule 58 (M)

    M  go to state 339


State 333

  193 iteration_statement: DO M statement M WHILE • LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    LEFT_PARENTHESES  shift, and go to state 340


State 334

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  187 expression_opt: • expression
  188               | ε •  [RIGHT_PARENTHESES]
  195 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON • expression_opt RIGHT_PARENTHESES statement

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    expression_opt             go to state 341


State 335

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M • expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    expression_opt             go to state 342


State 336

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  189                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  190                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 343
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 337

  191 selection_statement: SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement •

    $default  reduce using rule 191 (selection_statement)


State 338

   58 M: ε •
  192 iteration_statement: WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement

    $default  reduce using rule 58 (M)

    M  go to state 344


State 339

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65                       | logical_OR_expression N QUESTION_MARK M expression N COLON M • conditional_expression

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 153
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 345


State 340

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  193 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES • expression RIGHT_PARENTHESES SEMI_COLON

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 346


State 341

  195 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt • RIGHT_PARENTHESES statement

    RIGHT_PARENTHESES  shift, and go to state 347


State 342

  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt • SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 348


State 343

   59 N: ε •
  189 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement • N
  190                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement • N ELSE M statement

    $default  reduce using rule 59 (N)

    N  go to state 349


State 344

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  192                    | WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 350
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 345

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression •

    $default  reduce using rule 65 (conditional_expression)


State 346

   80 expression: expression • COMMA assignment_expression
  193 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES expression • RIGHT_PARENTHESES SEMI_COLON

    COMMA              shift, and go to state 196
    RIGHT_PARENTHESES  shift, and go to state 351


State 347

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  195                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES • statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 352
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 348

   58 M: ε •
  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON • M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 58 (M)

    M  go to state 353


State 349

  189 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N •  [AUTO, BREAK, CASE, CHARTYPE, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ENUM, EXTERN, FLOATTYPE, FOR, GOTO, IF, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, RETURN, SHORT, SIGNED, SIZEOF, STATIC, SWITCH, UNSIGNED, VOIDTYPE, VOLATILE, WHILE, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, SEMI_COLON, DECREMENT, BITWISE_AND]
  190                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N • ELSE M statement

    ELSE  shift, and go to state 354

    $default  reduce using rule 189 (selection_statement)

    Conflict between rule 189 and token ELSE resolved as shift (%right ELSE).


State 350

  192 iteration_statement: WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement •

    $default  reduce using rule 192 (iteration_statement)


State 351

  193 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES • SEMI_COLON

    SEMI_COLON  shift, and go to state 355


State 352

  195 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement •

    $default  reduce using rule 195 (iteration_statement)


State 353

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  187 expression_opt: • expression
  188               | ε •  [RIGHT_PARENTHESES]
  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M • expression_opt N RIGHT_PARENTHESES M statement

    SIZEOF              shift, and go to state 70
    IDENTIFIER          shift, and go to state 71
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    expression_opt             go to state 356


State 354

   58 M: ε •
  190 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE • M statement

    $default  reduce using rule 58 (M)

    M  go to state 357


State 355

  193 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON •

    $default  reduce using rule 193 (iteration_statement)


State 356

   59 N: ε •
  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt • N RIGHT_PARENTHESES M statement

    $default  reduce using rule 59 (N)

    N  go to state 358


State 357

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  190                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M • statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 359
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 358

  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N • RIGHT_PARENTHESES M statement

    RIGHT_PARENTHESES  shift, and go to state 360


State 359

  190 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement •

    $default  reduce using rule 190 (selection_statement)


State 360

   58 M: ε •
  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES • M statement

    $default  reduce using rule 58 (M)

    M  go to state 361


State 361

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • FLOATING_CONSTANT
    4                   | • CHARACTER_CONSTANT
    5                   | • STRING_LITERAL
    6                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: • primary_expression
    8                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | • postfix_expression DOT IDENTIFIER
   11                   | • postfix_expression ARROW IDENTIFIER
   12                   | • postfix_expression INCREMENT
   13                   | • postfix_expression DECREMENT
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: • postfix_expression
   21                 | • INCREMENT unary_expression
   22                 | • DECREMENT unary_expression
   23                 | • unary_operator cast_expression
   24                 | • SIZEOF unary_expression
   25                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: • BITWISE_AND
   27               | • ASTERISK
   28               | • PLUS
   29               | • MINUS
   30               | • TILDE
   31               | • EXCLAMATION
   32 cast_expression: • unary_expression
   33                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: • cast_expression
   35                          | • multiplicative_expression ASTERISK cast_expression
   36                          | • multiplicative_expression SLASH cast_expression
   37                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: • multiplicative_expression
   39                    | • additive_expression PLUS multiplicative_expression
   40                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: • additive_expression
   42                 | • shift_expression LEFT_SHIFT additive_expression
   43                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: • shift_expression
   45                      | • relational_expression LESS_THAN shift_expression
   46                      | • relational_expression GREATER_THAN shift_expression
   47                      | • relational_expression LESS_EQUAL_THAN shift_expression
   48                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: • relational_expression
   50                    | • equality_expression EQUALS relational_expression
   51                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: • equality_expression
   53               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: • AND_expression
   55                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: • exclusive_OR_expression
   57                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: • inclusive_OR_expression
   61                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: • logical_AND_expression
   63                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: • logical_OR_expression
   65                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: • conditional_expression
   67                      | • unary_expression assignment_operator assignment_expression
   79 expression: • assignment_expression
   80           | • expression COMMA assignment_expression
  170 statement: • labeled_statement
  171          | • compound_statement
  172          | • expression_statement
  173          | • selection_statement
  174          | • iteration_statement
  175          | • jump_statement
  176 labeled_statement: • IDENTIFIER COLON statement
  177                  | • CASE constant_expression COLON statement
  178                  | • DEFAULT COLON statement
  179 compound_statement: • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  186 expression_statement: • expression_opt SEMI_COLON
  187 expression_opt: • expression
  188               | ε •  [SEMI_COLON]
  189 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  190                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  191                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  192 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  193                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  194                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  194                    | FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M • statement
  195                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  196 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  197               | • CONTINUE SEMI_COLON
  198               | • BREAK SEMI_COLON
  199               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 235
    CASE                shift, and go to state 236
    CONTINUE            shift, and go to state 237
    DEFAULT             shift, and go to state 238
    DO                  shift, and go to state 239
    FOR                 shift, and go to state 240
    GOTO                shift, and go to state 241
    IF                  shift, and go to state 242
    RETURN              shift, and go to state 243
    SIZEOF              shift, and go to state 70
    SWITCH              shift, and go to state 244
    WHILE               shift, and go to state 245
    IDENTIFIER          shift, and go to state 246
    INTEGER_CONSTANT    shift, and go to state 72
    FLOATING_CONSTANT   shift, and go to state 73
    CHARACTER_CONSTANT  shift, and go to state 74
    STRING_LITERAL      shift, and go to state 75
    INCREMENT           shift, and go to state 76
    LEFT_PARENTHESES    shift, and go to state 77
    LEFT_CURLY_BRACKET  shift, and go to state 247
    ASTERISK            shift, and go to state 79
    PLUS                shift, and go to state 80
    MINUS               shift, and go to state 81
    TILDE               shift, and go to state 82
    EXCLAMATION         shift, and go to state 83
    DECREMENT           shift, and go to state 84
    BITWISE_AND         shift, and go to state 85

    $default  reduce using rule 188 (expression_opt)

    primary_expression         go to state 86
    postfix_expression         go to state 87
    unary_expression           go to state 88
    unary_operator             go to state 89
    cast_expression            go to state 90
    multiplicative_expression  go to state 91
    additive_expression        go to state 92
    shift_expression           go to state 93
    relational_expression      go to state 94
    equality_expression        go to state 95
    AND_expression             go to state 96
    exclusive_OR_expression    go to state 97
    inclusive_OR_expression    go to state 98
    logical_AND_expression     go to state 99
    logical_OR_expression      go to state 100
    conditional_expression     go to state 101
    assignment_expression      go to state 121
    expression                 go to state 248
    statement                  go to state 362
    labeled_statement          go to state 251
    compound_statement         go to state 252
    expression_statement       go to state 256
    expression_opt             go to state 257
    selection_statement        go to state 258
    iteration_statement        go to state 259
    jump_statement             go to state 260


State 362

  194 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement •

    $default  reduce using rule 194 (iteration_statement)
